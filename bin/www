#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('express-commerce-site:server');
const http = require('http');
const mongoose = require('mongoose')
const User = require('../models/user')
const ngrok = require('ngrok')
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);
const HOST = '127.0.0.1'
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

mongoose.connect('mongodb://127.0.0.1:27017/duka')
    // .then(result=>{
    //     const user = new User({
    //         name: 'John Doe',
    //         email: 'johndoe001@yahoo.com',
    //         cart: {
    //             items: []
    //         }
    //     })
    //     return user.save()
    // })
    .then(() => {
        server.listen(port,HOST,async ()=>{
            try {
                const url = await ngrok.connect(port)
                console.log(url)
            } catch (e) {
                console.log(e.message)
            }finally {
                console.log(`http://${HOST}:${port}`)
            }
        });
        server.on('error', onError);
        server.on('listening', onListening);
    })
    .catch(err => console.log(err))


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind + `http:\\${HOST}:${addr}`);
}
